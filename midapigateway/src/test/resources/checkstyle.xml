<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">

    <property name="fileExtensions" value="java, properties, xml"/>
    <!-- Encoding UTF-8 -->
    <property name="charset" value="UTF-8"/>

    <!-- Salto de linea Unix -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>

    <module name="FileTabCharacter"/>

    <module name="SuppressWarningsFilter"/>

    <module name="TreeWalker">
        <!-- Make the @SuppressWarnings annotations available to Checkstyle -->
        <module name="SuppressWarningsHolder"/>

        <!-- Existirá un espacio entre operadores -->
        <module name="GenericWhitespace"/>
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>

        <!-- Máximo de ancho de línea (120) -->
        <module name="LineLength">
            <property name="max" value="120"/>
        </module>

        <!-- Todos los bloques de código llevarán llaves -->
        <module name="NeedBraces"/>

        <!-- Las llaves de inicio estarán en la misma línea de la definición de clases y métodos -->
        <module name="LeftCurly"/>
        <module name="RightCurly"/>
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock"/>

        <!-- En caso de saltos de línea en los que exista un operador intercalado, éste comenzará la nueva línea -->
        <module name="OperatorWrap"/>

        <!-- Los argumentos de los métodos llevarán el modificador "final" -->
        <module name="RedundantModifier">
            <!-- METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF, CTOR_DEF, CLASS_DEF, ENUM_DEF -->
            <property name="tokens" value="METHOD_DEF"/>
        </module>

        <!-- Se exigirá una sentencia por línea -->
        <module name="OneStatementPerLine"/>

        <!-- Existirá un máximo de líneas por método (30) -->
        <module name="MethodLength">
            <property name="max" value="50"/>
        </module>

        <!-- No se permitirán bloques catch vacíos -->
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>

        <!-- Evitar anidamiento de bloques try-catch -->
        <module name="NestedTryDepth">
            <property name="max" value="3"/>
        </module>

        <!-- Utilizar constantes para manejar literales de cadena -->
        <module name="SuperClone"/>

        <!-- Número maximo de parametros en los métodos (5) -->
        <module name="ParameterNumber">
            <property name="max" value="5"/>
            <property name="ignoreOverriddenMethods" value="true"/>
        </module>

        <!-- No se permiten espacios en blanco entre el nombre de método y parentesis -->
        <module name="MethodParamPad"/>

        <!-- Magic Numbers -->
        <module name="MagicNumber"/>

        <!-- Los argumentos tienen que ser final -->
        <module name="FinalParameters"/>

        <!--Encuentra codigo como  if (b == true), b || true, !false, etc. -->
        <module name="SimplifyBooleanExpression"/>
        <!-- Revisa codigos complicados para los return de boleanos -->
        <module name="SimplifyBooleanReturn"/>

        <!--Revisa que las constantes long estan defindas con  'L' y no con 'l'.Java Language Specification, Section 3.10.1. -->
        <module name="UpperEll"/>

        <!-- Revisa los import no usados -->
        <module name="UnusedImports"/>
        <!-- Import inlegales -->
        <module name="IllegalImport">
            <property name="illegalPkgs" value="sun, org.apache.log4j, org.apache.commons.logging, ch.qos.logback"/>
        </module>
        <!--Import Reduntantes -->
        <module name="RedundantImport"/>

        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="TypeName"/>
        <module name="ConstantName">
            <property name="format" value="^log(ger)?|[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
        </module>

        <module name="Indentation"/>
    </module>

    <!-- Existirá un máximo de líneas por clase (250) -->
    <module name="FileLength">
        <property name="max" value="250"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>

    <!--
    -Código y opcionalmente comentarios en inglés
    -Evitar nombrado técnico de clases, métodos, etc. Seguir el enfoque propuesto de Lenguaje Ubicuo del DDD (Domain Driven Design)
    -Realizar un control estricto de variables vacías y muy especialmente nulos
    -Realizar comentarios de javadoc a nivel de métodos ELIMINADO
    -Establecer un límite de anidamiento de llamadas a métodos
    -Evaluar la complejidad del uso de operadores ternarios
    -Evitar la utilización de la clase Exception en bloques catch (esto ya lo controla Sonar)
    -Controlar variables sin utilizar (ya se emiten warnings en tiempo de compilación y Sonar también lo controla)
    ** Evitar anidamiento de bloques try-catch
    -->

</module>
